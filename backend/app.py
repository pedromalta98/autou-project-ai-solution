import os
import io
import requests
from flask import Flask, request, jsonify
from flask_cors import CORS
from PyPDF2 import PdfReader

app = Flask(__name__)
CORS(app)

def classify_text_hf(text, token):
    url = "https://api-inference.huggingface.co/models/MoritzLaurer/DeBERTa-v3-base-mnli-fever-anli"
    headers = {"Authorization": f"Bearer {token}"}
    payload = {
        "inputs": f"Este √© um email recebido por um assistente profissional. Classifique se √© 'Produtivo' ou 'Improdutivo'. Conte√∫do: {text}",
        "parameters": {
            "candidate_labels": ["Produtivo", "Improdutivo"]
        }
    }
    response = requests.post(url, headers=headers, json=payload)
    result = response.json()
    label = result.get("labels", ["Improdutivo"])[0]
    return label

def generate_reply_hf(text, category, token):
    prompt = (
        f"Voc√™ √© um assistente profissional. "
        f"Gere uma resposta breve e educada para um email classificado como '{category}'. "
        f"Email: {text}"
    )
    url = "https://api-inference.huggingface.co/models/google/flan-t5-large"
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    payload = {"inputs": prompt}

    try:
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        result = response.json()
        print("üîπ Prompt enviado:", prompt)
        print("üîπ Resposta da IA:", result)

        if isinstance(result, list) and len(result) > 0 and "generated_text" in result[0]:
            reply = result[0]["generated_text"]
        else:
            reply = (
                "Recebemos sua solicita√ß√£o e encaminhamos para a equipe respons√°vel. "
                "Agradecemos pelo contato e retornaremos em breve."
            )

    except Exception as e:
        print("‚ö†Ô∏è Erro na chamada √† Hugging Face:", e)
        reply = (
            "Recebemos sua solicita√ß√£o e encaminhamos para a equipe respons√°vel. "
            "Agradecemos pelo contato e retornaremos em breve."
        )

    return reply.strip()

@app.route("/health", methods=["GET"])
def health_check():
    return jsonify(status="ok"), 200

@app.route("/classify", methods=["POST"])
def classify():
    text = ""

    if "email-file" in request.files and request.files["email-file"].filename:
        f = request.files["email-file"]
        name = f.filename.lower()
        data = f.read()

        if name.endswith(".pdf"):
            reader = PdfReader(io.BytesIO(data))
            for page in reader.pages:
                text += page.extract_text() or ""
        elif name.endswith(".txt"):
            # tenta m√∫ltiplas codifica√ß√µes comuns em v√°rias regi√µes
            decodings = [
                # üáßüá∑ Brasil
                "utf-8", "utf-8-sig", "latin1", "cp1252", "ascii",
                # üá∫üá∏ Estados Unidos
                "utf-16",
                # üá™üá∫ Europa
                "windows-1250",
                # üåè √Åsia
                "shift_jis", "gbk", "euc-kr"
            ]
            for codec in decodings:
                try:
                    text = data.decode(codec)
                    print(f"üîπ Arquivo .txt decodificado com: {codec}")
                    break
                except Exception:
                    continue
            else:
                print("‚ùå Nenhuma codifica√ß√£o funcionou para o .txt")
                return jsonify(error="N√£o foi poss√≠vel decodificar o arquivo .txt"), 400
        else:
            return jsonify(error="Formato n√£o suportado"), 400
    else:
        text = request.form.get("email-text", "").strip()
        if not text:
            return jsonify(error="Nenhum conte√∫do enviado"), 400

    hf_token = os.getenv("HF_API_TOKEN")
    texto_limpo = text.lower()

    # üîç Gatilhos de improdutividade: promocionais + feriados
    palavras_gatilho = [
        # Promocionais
        "promo√ß√£o", "desconto", "gr√°tis", "oferta", "imperd√≠vel", "cupom", "voucher", "brinde",
        "lan√ßamento", "exclusivo", "√∫ltimas unidades", "compre agora", "aproveite", "liquida√ß√£o",
        "pre√ßo especial", "pre√ßo baixo", "frete gr√°tis", "amostra gr√°tis", "black friday",
        "cyber monday", "anivers√°rio de loja", "economize", "cashback", "vantagem", "novidade",
        "oportunidade", "ganhe", "garanta j√°", "por tempo limitado", "somente hoje", "√∫ltimo dia",
        "n√£o perca", "corra", "cliente vip", "oferta rel√¢mpago", "melhor pre√ßo",
        "condi√ß√µes especiais", "parcelamento facilitado", "sem juros",
        # Feriados e datas comemorativas
        "natal", "ano novo", "r√©veillon", "carnaval", "p√°scoa", "dia das m√£es", "dia dos pais",
        "dia dos namorados", "halloween", "feriado", "comemora√ß√£o", "festivo", "celebra√ß√£o",
        "especial de natal", "oferta de p√°scoa", "promo√ß√£o de feriado", "desconto de fim de ano",
        "liquida√ß√£o de natal", "presentes", "presenteie", "ceia", "festa", "temporada de compras"
    ]

    frases_gatilho = [
        # Promocionais
        "essa oferta √© para voc√™", "n√£o fique de fora", "voc√™ foi selecionado",
        "condi√ß√£o exclusiva para voc√™", "promo√ß√£o v√°lida por tempo limitado",
        "aproveite enquanto dura", "s√≥ para clientes especiais", "temos uma surpresa para voc√™",
        "voc√™ n√£o pode perder", "olha essa novidade", "confira nossa nova cole√ß√£o",
        "resgate seu cupom", "v√°lido at√© hoje", "condi√ß√µes imperd√≠veis",
        "ideal para voc√™ economizar", "veja o que preparamos para voc√™",
        "√∫ltimos dias da promo√ß√£o", "essa √© a sua chance", "oferta v√°lida apenas hoje",
        "compre agora e economize", "promo√ß√£o exclusiva online", "frete gr√°tis em todo o site",
        "at√© 70% de desconto", "brinde especial para voc√™", "ganhe mais por menos",
        "desconto especial para clientes fi√©is", "clique e aproveite", "√∫ltimas unidades dispon√≠veis",
        "condi√ß√£o nunca vista antes", "receba seu presente agora", "oportunidade √∫nica",
        "o melhor pre√ßo do mercado", "liquida√ß√£o total", "n√£o perca essa oportunidade",
        "exclusivo para assinantes", "parcelamento em at√© 12x sem juros", "s√≥ at√© amanh√£",
        "acelere e aproveite", "leve 3 e pague 2", "compre um e leve outro",
        # Feriados e datas comemorativas
        "especial de natal", "celebre o natal com a gente", "comemore o ano novo em grande estilo",
        "promo√ß√£o de fim de ano", "descontos de natal imperd√≠veis", "presentes para todos os gostos",
        "ofertas natalinas", "liquida√ß√£o de ano novo", "boas festas com economia",
        "esquente seu carnaval com ofertas", "promo√ß√£o de p√°scoa", "celebre com descontos especiais",
        "leve o presente ideal", "promo√ß√£o para o dia das m√£es", "presentes para o dia dos pais",
        "amor e ofertas no ar", "descontos apaixonantes", "ofertas assustadoras de halloween",
        "s√≥ hoje: oferta de p√°scoa", "venha conferir nossas ofertas natalinas",
        "natal premiado para voc√™", "entre no clima com nossas ofertas",
        "o presente perfeito est√° aqui", "tempo de economizar",
        "presentes inesquec√≠veis com desconto", "liquida√ß√£o p√≥s-feriado",
        "comemore economizando", "mais alegria, menos pre√ßo",
        "promo√ß√µes tem√°ticas incr√≠veis", "boas festas e bons pre√ßos"
    ]

    # üîé Gatilhos de produtividade t√©cnica
    gatilhos = [
        "erro", "falha", "urgente", "problema", "suporte", "ajuda",
        "travando", "bug", "inacess√≠vel", "cr√≠tico", "instabilidade",
        "parou", "lentid√£o", "inconsist√™ncia", "n√£o funciona", "n√£o carrega",
        "n√£o consigo acessar", "n√£o abre", "n√£o entra", "n√£o responde",
        "n√£o envia", "n√£o reconhece", "sistema caiu", "fora do ar", "apagou tudo",
        "me desconectou", "dados sumiram", "login inv√°lido", "tela branca",
        "tela preta", "formul√°rio travado", "formul√°rio com erro", "crash",
        "n√£o consigo concluir", "n√£o consigo finalizar", "n√£o salva", "c√≥digo de erro",
        "erro 500", "erro 404", "erro interno", "n√£o consigo emitir boleto",
        "erro na nota fiscal", "falha no pagamento", "problema financeiro",
        "n√£o gerou fatura", "estou sem faturamento", "cliente n√£o recebeu",
        "venda n√£o conclu√≠da", "pedido n√£o foi processado", "impacta minha opera√ß√£o",
        "interrompeu minhas vendas", "me gerou custo", "vou ter que parar tudo",
        "estou sendo cobrado", "isso afeta a entrega", "impacta contrato",
        "estou atrasado por causa disso", "isso pode gerar multa", "quest√£o legal",
        "problema jur√≠dico", "abri chamado", "ticket", "aguardo contato",
        "ningu√©m me respondeu", "n√£o tive retorno", "p√©ssima experi√™ncia",
        "muito ruim", "n√£o estou satisfeito", "inaceit√°vel", "decepcionante",
        "insuport√°vel", "vou cancelar", "nunca mais uso", "falta de respeito",
        "esperando h√° dias", "ningu√©m resolve", "j√° tentei de tudo",
        "problema recorrente", "isso acontece sempre", "j√° tive esse erro antes",
        "quero falar com algu√©m", "como posso resolver", "passo a passo",
        "preciso falar com algu√©m", "me ajudem", "socorro"
    ]

    # üß† L√≥gica de classifica√ß√£o
    if any(frase in texto_limpo for frase in frases_gatilho) or any(palavra in texto_limpo for palavra in palavras_gatilho):
        category = "Improdutivo"
    elif any(g in texto_limpo for g in gatilhos):
        category = "Produtivo"
    else:
        category = classify_text_hf(text, hf_token)

    if category == "Improdutivo":
        reply = "Este email n√£o requer resposta autom√°tica."
    else:
        reply = generate_reply_hf(text, category, hf_token)

    return jsonify(category=category, suggestion=reply), 200

if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)